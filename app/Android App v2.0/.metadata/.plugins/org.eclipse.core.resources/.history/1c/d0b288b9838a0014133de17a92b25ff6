package com.example.hitchbot;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.List;

import com.example.hitchbot.Data.DataGET;
import com.example.hitchbot.Data.DataPOST;
import com.example.hitchbot.Data.FileUpload;
import com.example.hitchbot.Models.FileUploadDb;
import com.example.hitchbot.Models.HttpPostDb;

import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

public class HitchActivity extends ActionBarActivity {

	public TakePicture tP;
	private Handler pictureHandler;
	private Handler dataCollectionHandler;
	private Handler internetHandler;
	private Handler fileUploadHander;
	
	private static String TAG = "HitchActivity";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_hitch);
		Config.context = this;
		Config.dQ = DatabaseQueue.getHelper(this);
		Config.dQ.launchMissles();
		tP = new TakePicture();
		setupHandlers();
		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.hitch, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public void takePicture() {
		tP.captureHandler();
	}

	private void setupHandlers() {
		dataCollectionHandler = new Handler();
		dataCollectionHandler.postDelayed(new Runnable() {

			@Override
			public void run() {
				// get environment and tablet info
				TabletInformation tI = new TabletInformation();
				tI.queueBatteryUpdates();

				// queue location info
				LocationUpdates lu = new LocationUpdates(Config.context);
				lu.setupProvider();
				dataCollectionHandler.postDelayed(this, Config.FIFTEEN_MINUTES);

			}

		}, Config.THIRTY_SECONDS);

		internetHandler = new Handler();
		internetHandler.postDelayed(new Runnable() {
			@Override
			public void run() {
				if (Config.networkAvailable()) {
					List<HttpPostDb> postQueue = Config.dQ
							.serverPostUploadQueue();
					HttpPostDb[] dbPostArray = new HttpPostDb[postQueue.size()];
					new DataPOST().execute(postQueue.toArray(dbPostArray));

					List<FileUploadDb> fileQueue = Config.dQ
							.serverFileUploadQueue();
					FileUploadDb[] dbFileArray = new FileUploadDb[fileQueue
							.size()];
					uploadFile(dbFileArray);
					new DataGET().execute(Config.cleverGET);
					internetHandler.postDelayed(this, Config.HALF_HOUR);
				}
			}
		}, Config.ONE_MINUTE);

		pictureHandler = new Handler();
		pictureHandler.postDelayed(new Runnable() {

			@Override
			public void run() {
				takePicture();
				pictureHandler.postDelayed(this, Config.FIFTEEN_MINUTES);
			}

		}, Config.THIRTY_SECONDS);
	}

	public void uploadFile(FileUploadDb[] fileUpload) {
		for (final FileUploadDb file : fileUpload) {
			fileUploadHander = new Handler();
			fileUploadHander.post(new Runnable() {

				@Override
				public void run() {
					try {
						Log.i(TAG, file.getUri());
						FileInputStream fstrm = new FileInputStream(file
								.getUri());
						String uploadUrl;
						switch (file.getFileType()) {
						case 0:
							uploadUrl = Config.audioPOST;
							break;
						case 1:
							uploadUrl = Config.imagePOST;
							break;
						default:
							uploadUrl = Config.audioPOST;
							break;
						}
						FileUpload hfu = new FileUpload(uploadUrl,
								"myfiletitle", "lifestoryORimage", file
										.getUri(), file.getFileType());

						hfu.send_Now(fstrm);

					} catch (FileNotFoundException e) {
						// TODO exception handling
					}
				}

			});
		}
	}
}
