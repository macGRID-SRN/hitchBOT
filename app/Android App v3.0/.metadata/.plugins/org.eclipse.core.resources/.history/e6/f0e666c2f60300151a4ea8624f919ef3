package Speech;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import Models.HttpPostDb;
import TransitionModels.SpeechPack;
import android.net.Uri;
import android.util.Log;

import com.cleverscript.android.CleverscriptAPI;
import com.example.hitchbot.Config;
import com.example.hitchbot.Activities.SpeechActivity;

public class CleverScriptHelper {

	// This class should be responsible to logging input and output to db

	public CleverscriptAPI cs;
	private static String TAG = "CleverScriptHelper";
	private SpeechOut speechOut;

	public CleverScriptHelper(String db, String APIkey) {
		cs = new CleverscriptAPI(Config.context);
		cs.setLocation(db);
		cs.setApiKey(APIkey);
		cs.setDebugLevel(4);
		cs.loadDatabase();
		// loadVariables();
	}

	public void setSpeechOut(SpeechOut speechOut) {
		this.speechOut = speechOut;
	}

	/*
	 * public void loadVariables() { // cs.assignVariable("test", "string"); for
	 * (NameValuePair pair : Config.cleverPair) {
	 * cs.assignVariable(pair.getName(), pair.getValue()); }
	 * 
	 * // TODO Load default variables }
	 */

	public void sendCleverScriptResponse(String message, double rmsDbLevel,
			float accuracy, int recognizer) {
		String output = getResponseFromCleverScript(message);
		
		List<NameValuePair> nvp = new ArrayList<NameValuePair>();
		nvp.add(new BasicNameValuePair("Said",Uri.encode(output)));
		nvp.add(new BasicNameValuePair("Heard",Uri.encode(message)));
		nvp.add(new BasicNameValuePair("Person",Uri.encode(Config.name)));
		nvp.add(new BasicNameValuePair("Notes",Uri.encode(Config.specInfo)));
		nvp.add(new BasicNameValuePair("MatchedLineLabel",Uri.encode(getRecentOutputLabel())));
		nvp.add(new BasicNameValuePair("MatchAccuracy",getAccuracy()));
		nvp.add(new BasicNameValuePair("EnvironmentType",""));
		nvp.add(new BasicNameValuePair("RecognitionScore",String.valueOf(accuracy)));
		nvp.add(new BasicNameValuePair("GoogleRecognitionScore",String.valueOf(accuracy)));
		nvp.add(new BasicNameValuePair("ResponseScore",""));
		nvp.add(new BasicNameValuePair("RecognizerTypeEnum",String.valueOf(recognizer)));
		nvp.add(new BasicNameValuePair("RmsDecibalLevel",String.valueOf(rmsDbLevel)));
		//String uri = String.format(Config.conversationPost, Config.ID,
		//		Uri.encode(output), Uri.encode(message), Config.getUtcDate(),
		//		Uri.encode(Config.name), Uri.encode(Config.specInfo),
		//		Uri.encode(getRecentOutputLabel()), getAccuracy(), rmsDbLevel,
		//		"", "", accuracy, recognizer);
		HttpPostDb httpPost = new HttpPostDb(Config.conversationPost, 0,null, nvp, 3);
		Config.dQ.addItemToQueue(httpPost);
		speechOut.Speak(output);
	}

	public void sendCleverScriptResponse(String message, int accuracy,
			int recognizer) {
		String output = getResponseFromCleverScript(message);
		
		int cleverAccuracy = 0;
		try{
			cleverAccuracy = Integer.parseInt(getAccuracy());
		}catch(Exception e){
			//do nothing
		}
		
		SpeechPack speechPack  = new SpeechPack(output, message, getRecentOutputLabel(),
				cleverAccuracy, accuracy, 0.0);

		HttpPostDb httpPost = new HttpPostDb(Config.conversationPost, 0,null, speechPack.toJson(), 3);
		Config.dQ.addItemToQueue(httpPost);
		speechOut.Speak(output);
	}

	public void sendCleverScriptResponse(String message) {
		String output = getResponseFromCleverScript(message);
		List<NameValuePair> nvp = new ArrayList<NameValuePair>();
		nvp.add(new BasicNameValuePair("Said",Uri.encode(output)));
		nvp.add(new BasicNameValuePair("Heard",Uri.encode(message)));
		nvp.add(new BasicNameValuePair("Person",""));
		nvp.add(new BasicNameValuePair("Notes",""));
		nvp.add(new BasicNameValuePair("MatchedLineLabel",Uri.encode(getRecentOutputLabel())));
		nvp.add(new BasicNameValuePair("MatchAccuracy",getAccuracy()));
		int cleverAccuracy = 0;
		try{
			cleverAccuracy = Integer.parseInt(getAccuracy());
		}catch(Exception e){
			//do nothing
		}
		
		SpeechPack speechPack  = new SpeechPack(output, message, getRecentOutputLabel(),
				cleverAccuracy, 0, 0.0);
		
		HttpPostDb httpPost = new HttpPostDb(Config.conversationPost, 0,null, speechPack.toJson(), 3);
		Config.dQ.addItemToQueue(httpPost);
		speechOut.Speak(output);
	}

	public String getResponseFromCleverScript(String message) {
		Log.i(TAG, message);
		return cs.sendMessage(message);
	}

	public String getRecentInput() {
		return cs.retrieveVariable("input");
	}

	public String getRecentOutputLabel() {
		return cs.retrieveVariable("output_label");
	}

	// Below method will most likely be updated and replaced

	public void getInformationForVariables(String jsonString) {
		if (jsonString != null) {
			try {
				JSONObject obj = new JSONObject(jsonString);
				JSONArray jO = obj.getJSONArray("data");

				for (int j = 0; j < jO.length(); j++) {
					JSONObject jobj = jO.getJSONObject(j);

					//NameValuePair nvP = new BasicNameValuePair(
					//		jobj.getString("key"),
					//		(String) jobj.getString("value"));
					//Config.cleverPair.add(nvP);

					cs.assignVariable((String) jobj.getString("key"),
							(String) jobj.getString("value"));
					Log.i(TAG, (String) jobj.getString("key") + " ");
					Log.i(TAG, (String) jobj.getString("value") + " ");

				}
			} catch (Exception e) { 
			}
		}
	}

	public String getBotState() {
		return cs.retrieveBotState();
	}

	public void loadBotState(String state) {
		cs.assignBotState(state);
	}

	public String getAccuracy() {
		return cs.retrieveVariable("accuracy");
	}

	public String getAudio_on() {
		return cs.retrieveVariable("audio_on");
	}

	public String getClever_data() {
		return cs.retrieveVariable("cleverdata_on");
	}

}
